{"remainingRequest":"C:\\Users\\Acer\\Documents\\transelectricfront\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Acer\\Documents\\transelectricfront\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Acer\\Documents\\transelectricfront\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Acer\\Documents\\transelectricfront\\src\\components\\news.vue?vue&type=template&id=25603163&","dependencies":[{"path":"C:\\Users\\Acer\\Documents\\transelectricfront\\src\\components\\news.vue","mtime":1634242874032},{"path":"C:\\Users\\Acer\\Documents\\transelectricfront\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1635806910519},{"path":"C:\\Users\\Acer\\Documents\\transelectricfront\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1635806913326},{"path":"C:\\Users\\Acer\\Documents\\transelectricfront\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1635806910519},{"path":"C:\\Users\\Acer\\Documents\\transelectricfront\\node_modules\\vue-loader\\lib\\index.js","mtime":1635806912497}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}